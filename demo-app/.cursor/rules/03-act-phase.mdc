---
description: A 5-phase workflow to assess viability, validate technical implementation, and execute Angular component migrations from legacy CSS to design system components with proper documentation and testing.
globs:
alwaysApply: false
---

```json
{
  "task": "Design System Component Migration Decision Framework",
  "inputs": {
    "checklist_path": "Path to implementation checklist",
    "dod_path": "Path to definition of done file"
  },
  "phases": [
    {
      "id": 1,
      "name": "A. REFACTORING EXECUTION",
      "proceed_without_approval": true,
      "steps": [
        "1. Load checklist from checklist_path (default value: .cursor/tmp/migrations/profiles-migration/migration-checklist.md)",
        "2. Execute loaded checklist fully and step by step. Update migration-checklist.md file to mark completed items",
        "3. Skip any build or test checks. Build a contract for refactoring components state, save in ticket folder",
        "4. Create a contracts diff using diff_component_contract tool to get a diff between before and after states. Move the diff file to ticket folder"
      ]
    },
    {
      "id": 2,
      "name": "B. Implementation validation",
      "steps": [
        "1. Load definition of done documdod_path (default value: .cursor/tmp/migrations/profiles-migration/definition-of-done.md)",
        "2. Read section <<### 1. Code Implementation>>.",
        "3. Follow validation instrucitons in <contract_based_validation>"
      ]
    },
    {
      "id": 3,
      "name": "C. Functional Validation",
      "steps": [
        "4. Read section <<### 2. Functional Validation>>.",
        "5. Follow validation instrucitons in <contract_based_validation>"
      ]
    },
    {
      "id": 4,
      "name": "D. Compliance Validation",
      "steps": [
        "6. Read section <<### 3. Design System Compliance>>.",
        "7. Follow validation instrucitons in <contract_based_validation>"
      ]
    },
    {
      "id": 5,
      "name": "E. Code Quality Validation",
      "steps": [
        "8. Read section <<### 4. Code Quality Requirements>>.",
        "9. Follow validation instructions in <code_quality_validation>"
      ]
    },
    {
      "id": 6,
      "name": "F. Finalization",
      "steps": [
        "10. Read <<## Acceptance Criteria Summary>> section",
        "11. Run report-all-violations tool to confirm no violations are left in the project",
        "12. Use the results of previous validations to confirm the rest of acceptance criterias",
        "13. In case of validation errors or unment success criterias provide a list to a user and wait for further instructions"
      ]
    }
  ]
}
```

<contract_based_validation>

- Iterate over every item one by one
- Use grep search in the created contracts diff file to validate item status
- Use grep on other code areas if requirements can not be fully confirmed with diff file alone.
- Update original definition of done document with pass/fail item status.
  </contract_based_validation>

<code_quality_validation>

- Use linting through ESLint MCP server to confirm new code is not introducing new eslint errors
- Identify the project package.json, read peerDependencies section and validate that {{DesignSystemComponent}} is listed. If not, add it if it's a buildable or publishable library.
- Run the build command and validate no typescript compilation or build errors
- Use grep or direct source file reads to confirm status of each still unchecked item
- Update original definition of done document with pass/fail item status.
  </code_quality_validation>
