---
description: Discovering URL(s) where given component(s) can be found
globs: 
alwaysApply: false
---
{
  "schema_version": "1.0",
  "task": "Angular routing analysis and URL discovery",
  "description": "Analyze Angular routing hierarchy using bottom-up approach: identify complete routing structure from app_directory (top point) and parent routes for specific files (bottom point), then connect them bottom-up with comprehensive redirect resolution. Output ONLY plain text with markdown syntax - DO NOT generate any files.",
  "inputs": {
    "app_directory": "Directory path where route definition files should be scanned (e.g., 'src/app')",
    "files": "Array of specific file paths to analyze (e.g., ['src/app/components/user.component.ts'])"
  },
  "phases": [
    {
      "id": 1,
      "name": "Routing Hierarchy Discovery & Bottom-Top Point Identification",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <routing_discovery> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "TOP POINT DISCOVERY: Scan app_directory completely to identify ALL routing files and build complete routing hierarchy tree (app.routes.ts, app-routing.module.ts, main.ts, and all loadChildren declarations).",
        "BOTTOM POINT DISCOVERY: For each file in the 'files' parameter, identify their immediate parent route files (the routing files that directly reference these components).",
        "COMPONENT CLASSIFICATION: Classify each file as either directly routable (has route definition) or non-routable (no direct route definition).",
        "VALIDATION: Present analysis results including: 'Files to Analyze: [list from files parameter]', 'TOP POINT: Complete App Routing Hierarchy', and 'BOTTOM POINT: File Parent Routes' lists, ensuring both points are identified before proceeding."
      ]
    },
    {
      "id": 2,
      "name": "Non-Routable Component Analysis",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <non_routable_analysis> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "IDENTIFY NON-ROUTABLE COMPONENTS: From the files list, identify components without direct route definitions (modals, dialogs, library components, child components).",
        "ROUTABLE PARENT DISCOVERY: For non-routable components, traverse the component hierarchy upward through multiple levels to find the first routable parent component. Handle multi-level chains where non-routable components are nested within other non-routable components.",
        "MODAL/LIBRARY TRIGGER ANALYSIS: For modal and library components, identify the parent component where they are used, triggered, or instantiated (MatDialog.open, component selectors, service calls).",
        "USAGE RELATIONSHIP MAPPING: Document the complete relationship chain including all intermediate levels: Non-routable Component â†’ Intermediate Parent(s) â†’ Final Routable Parent â†’ Route Path. Show the full traversal path for multi-level hierarchies.",
        "NON-ROUTABLE VALIDATION: Confirm all non-routable components have identified parent relationships before proceeding to route construction."
      ]
    },
    {
      "id": 3,
      "name": "Bottom-Up Route Connection & Path Construction",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <bottom_up_connection> tags, maximum 200 tokens, NO file generation",
              "steps": [
        "COMPREHENSIVE REDIRECT MAPPING: Scan ALL routing files in the complete hierarchy for 'redirectTo' declarations. Create redirect mapping table with [original_path] â†’ [redirectTo_path], including application-level, legacy, and inter-module redirects. Check for conflicting redirects and redirect loops.",
        "ROUTABLE COMPONENT TRACING: For directly routable components, trace upward through routing hierarchy from bottom point to top point. At EVERY level, check against redirect mapping table and follow complete redirect chains (A â†’ B â†’ C â†’ Final_Destination). Handle pathMatch conditions ('full' vs 'prefix') and parameterized redirects.",
        "NON-ROUTABLE COMPONENT PATH RESOLUTION: Using relationships from Phase 2, trace routing path to the parent component identified for each non-routable component to determine access URL.",
        "PATH CONSTRUCTION: Build complete paths with full redirect resolution applied at each level. Provide redirect audit trail showing Original_Path â†’ Intermediate_Redirects â†’ Final_Path for each route.",
        "MANDATORY PHASE 3 EXAMPLES: Provide 1-3 concrete route examples per file with realistic culture codes and parameters. Include direct routes, redirected routes, and parameterized routes. CRITICAL: For non-routable components, use parent component URLs from Phase 2 relationships and add notation that target component is non-routable but accessible within the parent."
        ]
    },
    {
      "id": 4,
      "name": "Parameter & Visibility Analysis",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <parameter_analysis> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "Extract parameter constraints from TypeScript files using the established bottom-up connections.",
        "Scan for visibility conditions: @if, *ngIf directives, route guards, permissions along the entire bottom-up path.",
        "Provide realistic examples with different culture codes and parameter values for the complete traced paths.",
        "Validate that all bottom-up connections maintain parameter inheritance and visibility constraints."
      ]
    },
    {
      "id": 5,
      "name": "MANDATORY Quick Access Summary Generation",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <quick_access_summary> tags, NO file generation",
      "steps": [
        "COLLECT & ORGANIZE: Gather all route examples from Phase 3 analysis for each file. Create one section per file with 1-3 route examples maximum. MANDATORY: Every component (routable and non-routable) must have at least one URL example.",
        "GENERATE SUMMARY STRUCTURE: Create 'ðŸŽ¯ QUICK ACCESS SUMMARY' section with exact format: Header 'Files Analyzed: [List all files]' followed by subsections '## File: [Filename.extension]' for each file.",
        "FORMAT VALIDATION: Use MANDATORY bullet list format with markdown bullets (-) for route examples. CRITICAL: Each route example MUST start with '- /' (markdown bullet + forward slash). FORBIDDEN: NO tables, NO pipes (|), NO table formatting whatsoever.",
        "CONTENT COMPLETION: Include redirect notation '(redirects to X)' where applicable and parent access notation for non-routable components '(non-routable, found in parent component at URL)'. MANDATORY: For non-routable components, use parent component URLs from Phase 2 relationships to provide accessible URLs. Ensure coverage of ALL files from 'files' parameter.",
        "FINAL VERIFICATION: Confirm Quick Access Summary contains ALL files from 'files' parameter with proper bullet format before completing analysis. CRITICAL: Verify every component has at least one URL example - for non-routable components, use parent URLs from Phase 2. OUTPUT ONLY plain text with markdown syntax - DO NOT generate any files. Analysis is NOT complete until Quick Access Summary is generated."
      ]
    }
  ]
}