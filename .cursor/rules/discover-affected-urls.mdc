---
description: Discovering URL(s) where given component(s) can be found
globs: 
alwaysApply: false
---
{
  "schema_version": "1.0",
  "task": "Angular routing analysis and URL discovery",
  "description": "Analyze Angular routing hierarchy using bottom-up approach: identify complete routing structure from app_directory (top point) and parent routes for specific files (bottom point), then connect them bottom-up with comprehensive redirect resolution. Output ONLY plain text with markdown syntax - DO NOT generate any files.",
  "inputs": {
    "app_directory": "Directory path where route definition files should be scanned (e.g., 'src/app')",
    "files": "Array of specific file paths to analyze (e.g., ['src/app/components/user.component.ts'])"
  },
  "phases": [
    {
      "id": 1,
      "name": "Routing Hierarchy Discovery & Component Search",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <routing_discovery> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "TOP POINT DISCOVERY: Scan app_directory completely to identify ALL routing files and build complete routing hierarchy tree (app.routes.ts, app-routing.module.ts, main.ts, and all loadChildren declarations).",
        "BOTTOM-UP DUAL DISCOVERY: For each file in 'files' parameter, extract component class name AND template selector. From these specific components, search upward for BOTH: (1) Direct parent routes referencing the component class, (2) Parent components using the template selector. MANDATORY: Trace ALL upward paths from each specific component - do not stop after finding first parent.",
        "BOTTOM-UP ROUTE MAPPING: From each specific component file, map ALL discovered upward paths. A single component may have multiple parent relationships (direct route definitions + template selector usage). Document every upward path discovered from the bottom point.",
        "ENHANCED CLASSIFICATION: Classify each component as DIRECTLY-ROUTABLE (found in route definitions), INDIRECTLY-ROUTABLE (template selector usage only), or BOTH. Components can have multiple routing scenarios simultaneously.",
        "VALIDATION: Present 'Files to Analyze', 'TOP POINT: Complete App Routing Hierarchy', 'BOTTOM POINT: All Route Scenarios per File', and 'ROUTE COMPLETENESS CHECK' confirming exhaustive search was performed."
      ]
    },
    {
      "id": 2,
      "name": "Non-Routable Component Analysis",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <non_routable_analysis> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "IDENTIFY NON-ROUTABLE COMPONENTS: From the files list, identify components without direct route definitions (modals, dialogs, library components, child components).",
        "ROUTABLE PARENT DISCOVERY: For non-routable components, traverse the component hierarchy upward through multiple levels to find the first routable parent component. Handle multi-level chains where non-routable components are nested within other non-routable components.",
        "MODAL/LIBRARY TRIGGER ANALYSIS: For modal and library components, identify the parent component where they are used, triggered, or instantiated (MatDialog.open, component selectors, service calls).",
        "USAGE RELATIONSHIP MAPPING: Document the complete relationship chain including all intermediate levels: Non-routable Component â†’ Intermediate Parent(s) â†’ Final Routable Parent â†’ Route Path. Show the full traversal path for multi-level hierarchies.",
        "NON-ROUTABLE VALIDATION: Confirm all non-routable components have identified parent relationships before proceeding to route construction."
      ]
    },
    {
      "id": 3,
      "name": "Exhaustive Route Construction & Verification",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <bottom_up_connection> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "COMPREHENSIVE REDIRECT MAPPING: Scan ALL routing files in the complete hierarchy for 'redirectTo' declarations. Create redirect mapping table with [original_path] â†’ [redirectTo_path], including application-level, legacy, and inter-module redirects. Check for conflicting redirects and redirect loops.",
        "BOTTOM-UP EXHAUSTIVE TRACING: For each component from Phase 1, trace ALL upward paths to build complete route chains: (1) Direct bottom-up routes from component class to routing hierarchy, (2) Indirect bottom-up routes from template selector through parent components to routing hierarchy. Cross-reference both upward traces to ensure no paths are missed.",
        "MULTI-SCENARIO PATH CONSTRUCTION: Build complete paths for every routing scenario discovered. Apply redirect resolution at each level. Document all paths: direct routes, redirected routes, and parent-access routes for non-routable components.",
        "ROUTE COMPLETENESS VERIFICATION: Cross-check that all component routing scenarios from Phase 1 have corresponding path constructions. Verify no discovered routes were omitted from path building.",
        "MANDATORY PHASE 3 EXAMPLES: Provide 1-3 concrete route examples per routing scenario (not just per file). If component has both direct and indirect routes, show examples for BOTH. Include realistic culture codes and parameters."
      ]
    },
    {
      "id": 4,
      "name": "Parameter & Visibility Analysis",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <parameter_analysis> tags, maximum 200 tokens, NO file generation",
      "steps": [
        "Extract parameter constraints from TypeScript files using ALL established routing connections from Phase 3.",
        "Scan for visibility conditions: @if, *ngIf directives, route guards, permissions along ALL discovered route paths.",
        "Provide realistic examples with different culture codes and parameter values for ALL traced paths (direct and indirect).",
        "Validate that all routing scenarios maintain parameter inheritance and visibility constraints across different access methods."
      ]
    },
    {
      "id": 5,
      "name": "MANDATORY Comprehensive Summary Generation",
      "requires_approval": false,
      "response_format": "plain text with markdown syntax wrapped with <quick_access_summary> tags, NO file generation",
      "steps": [
        "COLLECT ALL SCENARIOS: Gather route examples from Phase 3 for EVERY routing scenario discovered. Include both direct routes and parent-access routes. MANDATORY: Every component must have at least one URL example for each routing scenario identified.",
        "GENERATE SUMMARY STRUCTURE: Create 'ðŸŽ¯ QUICK ACCESS SUMMARY' section with exact format: Header 'Files Analyzed: [List all files]' followed by subsections '## File: [Filename.extension]' for each file.",
        "FORMAT VALIDATION: Use MANDATORY bullet list format with markdown bullets (-) for route examples. CRITICAL: Each route example MUST start with '- /' (markdown bullet + forward slash). FORBIDDEN: NO tables, NO pipes (|), NO table formatting whatsoever.",
        "COMPLETE SCENARIO COVERAGE: Include ALL discovered routing scenarios: direct routes, redirected routes, and parent-access routes. Add clear notation: '(direct route)', '(redirects to X)', '(non-routable, found in parent component at URL)'. MANDATORY: Cover every routing scenario from Phase 1 discovery.",
        "FINAL COMPLETENESS VERIFICATION: Confirm Quick Access Summary contains ALL files AND ALL routing scenarios discovered in Phase 1. CRITICAL: Verify every routing scenario has at least one URL example. Cross-reference against Phase 1 findings to ensure no routes were missed. Analysis is NOT complete until ALL discovered scenarios are represented."
      ]
    }
  ]
}